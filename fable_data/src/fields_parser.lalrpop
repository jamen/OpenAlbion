use alloc::string::String;
use alloc::vec::Vec;
use alloc::borrow::ToOwned;

use core::str::FromStr;

use crate::{Field,Key,Value,Accessor};

grammar;

pub Fields: Vec<Field> = <f:Field*> => f;

Field: Field = {
    <key:Key> <value:Value?> ";"  => Field { key, value }
}

Key: Key = {
    <name:Ident> <accessors:Accessor*> => Key { name, accessors }
}

Accessor: Accessor = {
    "." <ident:Ident> => Accessor::Dot(ident),
    "[" <index:Integer> "]" => Accessor::Box(index),
}

Value: Value = {
    <ident:Ident> => Value::Ident(ident),
    <int:Integer> => Value::Integer(int),
}

Ident: String = <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => s.to_owned();

Integer: i64 = <s:r"[0-9]+"> => i64::from_str(s).unwrap();